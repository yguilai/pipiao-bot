// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: wfs/v1/wfs.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CyclesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cycles []*CyclesResp_Cycle `protobuf:"bytes,1,rep,name=cycles,proto3" json:"cycles,omitempty"`
}

func (x *CyclesResp) Reset() {
	*x = CyclesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CyclesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CyclesResp) ProtoMessage() {}

func (x *CyclesResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CyclesResp.ProtoReflect.Descriptor instead.
func (*CyclesResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{0}
}

func (x *CyclesResp) GetCycles() []*CyclesResp_Cycle {
	if x != nil {
		return x.Cycles
	}
	return nil
}

type CyclesResp_Cycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Activation int64   `protobuf:"varint,2,opt,name=activation,proto3" json:"activation,omitempty"`
	Expiry     int64   `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	State      string  `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	TimeLeft   []int64 `protobuf:"varint,5,rep,packed,name=timeLeft,proto3" json:"timeLeft,omitempty"`
}

func (x *CyclesResp_Cycle) Reset() {
	*x = CyclesResp_Cycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CyclesResp_Cycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CyclesResp_Cycle) ProtoMessage() {}

func (x *CyclesResp_Cycle) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CyclesResp_Cycle.ProtoReflect.Descriptor instead.
func (*CyclesResp_Cycle) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CyclesResp_Cycle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CyclesResp_Cycle) GetActivation() int64 {
	if x != nil {
		return x.Activation
	}
	return 0
}

func (x *CyclesResp_Cycle) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *CyclesResp_Cycle) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CyclesResp_Cycle) GetTimeLeft() []int64 {
	if x != nil {
		return x.TimeLeft
	}
	return nil
}

var File_wfs_v1_wfs_proto protoreflect.FileDescriptor

var file_wfs_v1_wfs_proto_rawDesc = []byte{
	0x0a, 0x10, 0x77, 0x66, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x05, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x32, 0xc5, 0x05, 0x0a,
	0x03, 0x57, 0x66, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x77, 0x66, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56,
	0x6f, 0x69, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e,
	0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x76, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x4b, 0x75, 0x76, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x64, 0x53,
	0x74, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x44, 0x65, 0x61, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x1a, 0x5a, 0x18, 0x70, 0x69, 0x70, 0x69, 0x61, 0x6f, 0x2d, 0x62,
	0x6f, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x66, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wfs_v1_wfs_proto_rawDescOnce sync.Once
	file_wfs_v1_wfs_proto_rawDescData = file_wfs_v1_wfs_proto_rawDesc
)

func file_wfs_v1_wfs_proto_rawDescGZIP() []byte {
	file_wfs_v1_wfs_proto_rawDescOnce.Do(func() {
		file_wfs_v1_wfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_wfs_v1_wfs_proto_rawDescData)
	})
	return file_wfs_v1_wfs_proto_rawDescData
}

var file_wfs_v1_wfs_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_wfs_v1_wfs_proto_goTypes = []interface{}{
	(*CyclesResp)(nil),       // 0: wfs.v1.CyclesResp
	(*CyclesResp_Cycle)(nil), // 1: wfs.v1.CyclesResp.Cycle
	(*emptypb.Empty)(nil),    // 2: google.protobuf.Empty
}
var file_wfs_v1_wfs_proto_depIdxs = []int32{
	1,  // 0: wfs.v1.CyclesResp.cycles:type_name -> wfs.v1.CyclesResp.Cycle
	2,  // 1: wfs.v1.Wfs.GetCycles:input_type -> google.protobuf.Empty
	2,  // 2: wfs.v1.Wfs.GetAlerts:input_type -> google.protobuf.Empty
	2,  // 3: wfs.v1.Wfs.GetSorties:input_type -> google.protobuf.Empty
	2,  // 4: wfs.v1.Wfs.GetVoidTrader:input_type -> google.protobuf.Empty
	2,  // 5: wfs.v1.Wfs.GetWarframeMarket:input_type -> google.protobuf.Empty
	2,  // 6: wfs.v1.Wfs.GetWarframeMarketRiven:input_type -> google.protobuf.Empty
	2,  // 7: wfs.v1.Wfs.GetInvasions:input_type -> google.protobuf.Empty
	2,  // 8: wfs.v1.Wfs.GetNightwaves:input_type -> google.protobuf.Empty
	2,  // 9: wfs.v1.Wfs.GetKuva:input_type -> google.protobuf.Empty
	2,  // 10: wfs.v1.Wfs.GetVoidStorm:input_type -> google.protobuf.Empty
	2,  // 11: wfs.v1.Wfs.GetDailyDeal:input_type -> google.protobuf.Empty
	0,  // 12: wfs.v1.Wfs.GetCycles:output_type -> wfs.v1.CyclesResp
	2,  // 13: wfs.v1.Wfs.GetAlerts:output_type -> google.protobuf.Empty
	2,  // 14: wfs.v1.Wfs.GetSorties:output_type -> google.protobuf.Empty
	2,  // 15: wfs.v1.Wfs.GetVoidTrader:output_type -> google.protobuf.Empty
	2,  // 16: wfs.v1.Wfs.GetWarframeMarket:output_type -> google.protobuf.Empty
	2,  // 17: wfs.v1.Wfs.GetWarframeMarketRiven:output_type -> google.protobuf.Empty
	2,  // 18: wfs.v1.Wfs.GetInvasions:output_type -> google.protobuf.Empty
	2,  // 19: wfs.v1.Wfs.GetNightwaves:output_type -> google.protobuf.Empty
	2,  // 20: wfs.v1.Wfs.GetKuva:output_type -> google.protobuf.Empty
	2,  // 21: wfs.v1.Wfs.GetVoidStorm:output_type -> google.protobuf.Empty
	2,  // 22: wfs.v1.Wfs.GetDailyDeal:output_type -> google.protobuf.Empty
	12, // [12:23] is the sub-list for method output_type
	1,  // [1:12] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_wfs_v1_wfs_proto_init() }
func file_wfs_v1_wfs_proto_init() {
	if File_wfs_v1_wfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wfs_v1_wfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CyclesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CyclesResp_Cycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wfs_v1_wfs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wfs_v1_wfs_proto_goTypes,
		DependencyIndexes: file_wfs_v1_wfs_proto_depIdxs,
		MessageInfos:      file_wfs_v1_wfs_proto_msgTypes,
	}.Build()
	File_wfs_v1_wfs_proto = out.File
	file_wfs_v1_wfs_proto_rawDesc = nil
	file_wfs_v1_wfs_proto_goTypes = nil
	file_wfs_v1_wfs_proto_depIdxs = nil
}
