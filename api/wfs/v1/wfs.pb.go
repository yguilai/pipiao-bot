// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: wfs/v1/wfs.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// warframe market buyout policy enum
type WmaBuyoutPolicy int32

const (
	WmaBuyoutPolicy_With   WmaBuyoutPolicy = 0
	WmaBuyoutPolicy_Direct WmaBuyoutPolicy = 1
)

// Enum value maps for WmaBuyoutPolicy.
var (
	WmaBuyoutPolicy_name = map[int32]string{
		0: "With",
		1: "Direct",
	}
	WmaBuyoutPolicy_value = map[string]int32{
		"With":   0,
		"Direct": 1,
	}
)

func (x WmaBuyoutPolicy) Enum() *WmaBuyoutPolicy {
	p := new(WmaBuyoutPolicy)
	*p = x
	return p
}

func (x WmaBuyoutPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WmaBuyoutPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_wfs_v1_wfs_proto_enumTypes[0].Descriptor()
}

func (WmaBuyoutPolicy) Type() protoreflect.EnumType {
	return &file_wfs_v1_wfs_proto_enumTypes[0]
}

func (x WmaBuyoutPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WmaBuyoutPolicy.Descriptor instead.
func (WmaBuyoutPolicy) EnumDescriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{0}
}

type WmaSortBy int32

const (
	WmaSortBy_PriceDesc        WmaSortBy = 0
	WmaSortBy_PriceAsc         WmaSortBy = 1
	WmaSortBy_DamageDesc       WmaSortBy = 2
	WmaSortBy_DamageAsc        WmaSortBy = 3
	WmaSortBy_PositiveAttrDesc WmaSortBy = 4
	WmaSortBy_PositiveAttrAsc  WmaSortBy = 5
)

// Enum value maps for WmaSortBy.
var (
	WmaSortBy_name = map[int32]string{
		0: "PriceDesc",
		1: "PriceAsc",
		2: "DamageDesc",
		3: "DamageAsc",
		4: "PositiveAttrDesc",
		5: "PositiveAttrAsc",
	}
	WmaSortBy_value = map[string]int32{
		"PriceDesc":        0,
		"PriceAsc":         1,
		"DamageDesc":       2,
		"DamageAsc":        3,
		"PositiveAttrDesc": 4,
		"PositiveAttrAsc":  5,
	}
)

func (x WmaSortBy) Enum() *WmaSortBy {
	p := new(WmaSortBy)
	*p = x
	return p
}

func (x WmaSortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WmaSortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_wfs_v1_wfs_proto_enumTypes[1].Descriptor()
}

func (WmaSortBy) Type() protoreflect.EnumType {
	return &file_wfs_v1_wfs_proto_enumTypes[1]
}

func (x WmaSortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WmaSortBy.Descriptor instead.
func (WmaSortBy) EnumDescriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{1}
}

type WarframeMarketRivenReq_WmrOperation int32

const (
	WarframeMarketRivenReq_AllOf WarframeMarketRivenReq_WmrOperation = 0
	WarframeMarketRivenReq_AnyOf WarframeMarketRivenReq_WmrOperation = 1
)

// Enum value maps for WarframeMarketRivenReq_WmrOperation.
var (
	WarframeMarketRivenReq_WmrOperation_name = map[int32]string{
		0: "AllOf",
		1: "AnyOf",
	}
	WarframeMarketRivenReq_WmrOperation_value = map[string]int32{
		"AllOf": 0,
		"AnyOf": 1,
	}
)

func (x WarframeMarketRivenReq_WmrOperation) Enum() *WarframeMarketRivenReq_WmrOperation {
	p := new(WarframeMarketRivenReq_WmrOperation)
	*p = x
	return p
}

func (x WarframeMarketRivenReq_WmrOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WarframeMarketRivenReq_WmrOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_wfs_v1_wfs_proto_enumTypes[2].Descriptor()
}

func (WarframeMarketRivenReq_WmrOperation) Type() protoreflect.EnumType {
	return &file_wfs_v1_wfs_proto_enumTypes[2]
}

func (x WarframeMarketRivenReq_WmrOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WarframeMarketRivenReq_WmrOperation.Descriptor instead.
func (WarframeMarketRivenReq_WmrOperation) EnumDescriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{12, 0}
}

type WarframeMarketLichReq_WmlElement int32

const (
	WarframeMarketLichReq_Impact      WarframeMarketLichReq_WmlElement = 0
	WarframeMarketLichReq_Heat        WarframeMarketLichReq_WmlElement = 1
	WarframeMarketLichReq_Cold        WarframeMarketLichReq_WmlElement = 2
	WarframeMarketLichReq_Electricity WarframeMarketLichReq_WmlElement = 3
	WarframeMarketLichReq_Toxin       WarframeMarketLichReq_WmlElement = 4
	WarframeMarketLichReq_Magnetic    WarframeMarketLichReq_WmlElement = 5
	WarframeMarketLichReq_Radiation   WarframeMarketLichReq_WmlElement = 6
)

// Enum value maps for WarframeMarketLichReq_WmlElement.
var (
	WarframeMarketLichReq_WmlElement_name = map[int32]string{
		0: "Impact",
		1: "Heat",
		2: "Cold",
		3: "Electricity",
		4: "Toxin",
		5: "Magnetic",
		6: "Radiation",
	}
	WarframeMarketLichReq_WmlElement_value = map[string]int32{
		"Impact":      0,
		"Heat":        1,
		"Cold":        2,
		"Electricity": 3,
		"Toxin":       4,
		"Magnetic":    5,
		"Radiation":   6,
	}
)

func (x WarframeMarketLichReq_WmlElement) Enum() *WarframeMarketLichReq_WmlElement {
	p := new(WarframeMarketLichReq_WmlElement)
	*p = x
	return p
}

func (x WarframeMarketLichReq_WmlElement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WarframeMarketLichReq_WmlElement) Descriptor() protoreflect.EnumDescriptor {
	return file_wfs_v1_wfs_proto_enumTypes[3].Descriptor()
}

func (WarframeMarketLichReq_WmlElement) Type() protoreflect.EnumType {
	return &file_wfs_v1_wfs_proto_enumTypes[3]
}

func (x WarframeMarketLichReq_WmlElement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WarframeMarketLichReq_WmlElement.Descriptor instead.
func (WarframeMarketLichReq_WmlElement) EnumDescriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{13, 0}
}

type CyclesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cycles []*CyclesResp_Cycle `protobuf:"bytes,1,rep,name=cycles,proto3" json:"cycles,omitempty"`
}

func (x *CyclesResp) Reset() {
	*x = CyclesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CyclesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CyclesResp) ProtoMessage() {}

func (x *CyclesResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CyclesResp.ProtoReflect.Descriptor instead.
func (*CyclesResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{0}
}

func (x *CyclesResp) GetCycles() []*CyclesResp_Cycle {
	if x != nil {
		return x.Cycles
	}
	return nil
}

type AlertsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AlertsResp) Reset() {
	*x = AlertsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertsResp) ProtoMessage() {}

func (x *AlertsResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertsResp.ProtoReflect.Descriptor instead.
func (*AlertsResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{1}
}

type VoidStormResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fissures []*VoidStormResp_Fissure `protobuf:"bytes,1,rep,name=fissures,proto3" json:"fissures,omitempty"`
}

func (x *VoidStormResp) Reset() {
	*x = VoidStormResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoidStormResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoidStormResp) ProtoMessage() {}

func (x *VoidStormResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoidStormResp.ProtoReflect.Descriptor instead.
func (*VoidStormResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{2}
}

func (x *VoidStormResp) GetFissures() []*VoidStormResp_Fissure {
	if x != nil {
		return x.Fissures
	}
	return nil
}

type SortiesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Activation  string                 `protobuf:"bytes,2,opt,name=activation,proto3" json:"activation,omitempty"`
	StartString string                 `protobuf:"bytes,3,opt,name=startString,proto3" json:"startString,omitempty"`
	Expiry      string                 `protobuf:"bytes,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Active      bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	RewardPool  string                 `protobuf:"bytes,6,opt,name=rewardPool,proto3" json:"rewardPool,omitempty"`
	Variants    []*SortiesResp_Variant `protobuf:"bytes,7,rep,name=variants,proto3" json:"variants,omitempty"`
	Boss        string                 `protobuf:"bytes,9,opt,name=boss,proto3" json:"boss,omitempty"`
	Faction     string                 `protobuf:"bytes,10,opt,name=faction,proto3" json:"faction,omitempty"`
	Expired     bool                   `protobuf:"varint,11,opt,name=expired,proto3" json:"expired,omitempty"`
	Eta         string                 `protobuf:"bytes,12,opt,name=eta,proto3" json:"eta,omitempty"`
}

func (x *SortiesResp) Reset() {
	*x = SortiesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortiesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortiesResp) ProtoMessage() {}

func (x *SortiesResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortiesResp.ProtoReflect.Descriptor instead.
func (*SortiesResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{3}
}

func (x *SortiesResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SortiesResp) GetActivation() string {
	if x != nil {
		return x.Activation
	}
	return ""
}

func (x *SortiesResp) GetStartString() string {
	if x != nil {
		return x.StartString
	}
	return ""
}

func (x *SortiesResp) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

func (x *SortiesResp) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *SortiesResp) GetRewardPool() string {
	if x != nil {
		return x.RewardPool
	}
	return ""
}

func (x *SortiesResp) GetVariants() []*SortiesResp_Variant {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *SortiesResp) GetBoss() string {
	if x != nil {
		return x.Boss
	}
	return ""
}

func (x *SortiesResp) GetFaction() string {
	if x != nil {
		return x.Faction
	}
	return ""
}

func (x *SortiesResp) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *SortiesResp) GetEta() string {
	if x != nil {
		return x.Eta
	}
	return ""
}

type VoidTraderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Activation   string `protobuf:"bytes,2,opt,name=activation,proto3" json:"activation,omitempty"`
	StartString  string `protobuf:"bytes,3,opt,name=startString,proto3" json:"startString,omitempty"`
	Expiry       string `protobuf:"bytes,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Active       bool   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	Character    string `protobuf:"bytes,6,opt,name=character,proto3" json:"character,omitempty"`
	Location     string `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	PsId         string `protobuf:"bytes,9,opt,name=psId,proto3" json:"psId,omitempty"`
	EndString    string `protobuf:"bytes,10,opt,name=endString,proto3" json:"endString,omitempty"`
	InitialStart string `protobuf:"bytes,11,opt,name=initialStart,proto3" json:"initialStart,omitempty"`
}

func (x *VoidTraderResp) Reset() {
	*x = VoidTraderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoidTraderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoidTraderResp) ProtoMessage() {}

func (x *VoidTraderResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoidTraderResp.ProtoReflect.Descriptor instead.
func (*VoidTraderResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{4}
}

func (x *VoidTraderResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VoidTraderResp) GetActivation() string {
	if x != nil {
		return x.Activation
	}
	return ""
}

func (x *VoidTraderResp) GetStartString() string {
	if x != nil {
		return x.StartString
	}
	return ""
}

func (x *VoidTraderResp) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

func (x *VoidTraderResp) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *VoidTraderResp) GetCharacter() string {
	if x != nil {
		return x.Character
	}
	return ""
}

func (x *VoidTraderResp) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *VoidTraderResp) GetPsId() string {
	if x != nil {
		return x.PsId
	}
	return ""
}

func (x *VoidTraderResp) GetEndString() string {
	if x != nil {
		return x.EndString
	}
	return ""
}

func (x *VoidTraderResp) GetInitialStart() string {
	if x != nil {
		return x.InitialStart
	}
	return ""
}

type InvasionsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvasionsResp) Reset() {
	*x = InvasionsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvasionsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvasionsResp) ProtoMessage() {}

func (x *InvasionsResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvasionsResp.ProtoReflect.Descriptor instead.
func (*InvasionsResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{5}
}

type NightwavesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NightwavesResp) Reset() {
	*x = NightwavesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NightwavesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NightwavesResp) ProtoMessage() {}

func (x *NightwavesResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NightwavesResp.ProtoReflect.Descriptor instead.
func (*NightwavesResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{6}
}

type KuvaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KuvaResp) Reset() {
	*x = KuvaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KuvaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KuvaResp) ProtoMessage() {}

func (x *KuvaResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KuvaResp.ProtoReflect.Descriptor instead.
func (*KuvaResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{7}
}

type DailyDealsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyDeals []*DailyDealsResp_DailyDeal `protobuf:"bytes,1,rep,name=dailyDeals,proto3" json:"dailyDeals,omitempty"`
}

func (x *DailyDealsResp) Reset() {
	*x = DailyDealsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyDealsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyDealsResp) ProtoMessage() {}

func (x *DailyDealsResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyDealsResp.ProtoReflect.Descriptor instead.
func (*DailyDealsResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{8}
}

func (x *DailyDealsResp) GetDailyDeals() []*DailyDealsResp_DailyDeal {
	if x != nil {
		return x.DailyDeals
	}
	return nil
}

type WarframeMarketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Platform *string `protobuf:"bytes,2,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
}

func (x *WarframeMarketReq) Reset() {
	*x = WarframeMarketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketReq) ProtoMessage() {}

func (x *WarframeMarketReq) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketReq.ProtoReflect.Descriptor instead.
func (*WarframeMarketReq) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{9}
}

func (x *WarframeMarketReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WarframeMarketReq) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

type WarframeMarketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*WarframeMarketResp_WarframeMarketOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *WarframeMarketResp) Reset() {
	*x = WarframeMarketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketResp) ProtoMessage() {}

func (x *WarframeMarketResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketResp.ProtoReflect.Descriptor instead.
func (*WarframeMarketResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{10}
}

func (x *WarframeMarketResp) GetOrders() []*WarframeMarketResp_WarframeMarketOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

type WarframeMarketUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IngameName string `protobuf:"bytes,2,opt,name=ingameName,proto3" json:"ingameName,omitempty"`
	Avatar     string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Locale     string `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	Region     string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Status     string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Reputation int64  `protobuf:"varint,7,opt,name=reputation,proto3" json:"reputation,omitempty"`
}

func (x *WarframeMarketUser) Reset() {
	*x = WarframeMarketUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketUser) ProtoMessage() {}

func (x *WarframeMarketUser) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketUser.ProtoReflect.Descriptor instead.
func (*WarframeMarketUser) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{11}
}

func (x *WarframeMarketUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WarframeMarketUser) GetIngameName() string {
	if x != nil {
		return x.IngameName
	}
	return ""
}

func (x *WarframeMarketUser) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *WarframeMarketUser) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *WarframeMarketUser) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *WarframeMarketUser) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WarframeMarketUser) GetReputation() int64 {
	if x != nil {
		return x.Reputation
	}
	return 0
}

type WarframeMarketRivenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform       *string                              `protobuf:"bytes,1,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	BuyoutPolicy   *WmaBuyoutPolicy                     `protobuf:"varint,2,opt,name=buyoutPolicy,proto3,enum=wfs.v1.WmaBuyoutPolicy,oneof" json:"buyoutPolicy,omitempty"`
	WeaponUrlName  string                               `protobuf:"bytes,3,opt,name=weaponUrlName,proto3" json:"weaponUrlName,omitempty"`
	PositiveStats  *string                              `protobuf:"bytes,4,opt,name=positiveStats,proto3,oneof" json:"positiveStats,omitempty"`
	NegativeStats  *string                              `protobuf:"bytes,5,opt,name=negativeStats,proto3,oneof" json:"negativeStats,omitempty"`
	Operation      *WarframeMarketRivenReq_WmrOperation `protobuf:"varint,6,opt,name=operation,proto3,enum=wfs.v1.WarframeMarketRivenReq_WmrOperation,oneof" json:"operation,omitempty"`
	MasteryRankMin *int32                               `protobuf:"varint,7,opt,name=masteryRankMin,proto3,oneof" json:"masteryRankMin,omitempty"`
	MasteryRankMax *int32                               `protobuf:"varint,8,opt,name=masteryRankMax,proto3,oneof" json:"masteryRankMax,omitempty"`
	ReRollsMin     *int32                               `protobuf:"varint,9,opt,name=reRollsMin,proto3,oneof" json:"reRollsMin,omitempty"`
	ReRollsMax     *int32                               `protobuf:"varint,10,opt,name=reRollsMax,proto3,oneof" json:"reRollsMax,omitempty"`
	ModRank        *string                              `protobuf:"bytes,11,opt,name=modRank,proto3,oneof" json:"modRank,omitempty"`
	Polarity       *string                              `protobuf:"bytes,12,opt,name=polarity,proto3,oneof" json:"polarity,omitempty"`
	SortBy         WmaSortBy                            `protobuf:"varint,13,opt,name=sortBy,proto3,enum=wfs.v1.WmaSortBy" json:"sortBy,omitempty"`
}

func (x *WarframeMarketRivenReq) Reset() {
	*x = WarframeMarketRivenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketRivenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketRivenReq) ProtoMessage() {}

func (x *WarframeMarketRivenReq) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketRivenReq.ProtoReflect.Descriptor instead.
func (*WarframeMarketRivenReq) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{12}
}

func (x *WarframeMarketRivenReq) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *WarframeMarketRivenReq) GetBuyoutPolicy() WmaBuyoutPolicy {
	if x != nil && x.BuyoutPolicy != nil {
		return *x.BuyoutPolicy
	}
	return WmaBuyoutPolicy_With
}

func (x *WarframeMarketRivenReq) GetWeaponUrlName() string {
	if x != nil {
		return x.WeaponUrlName
	}
	return ""
}

func (x *WarframeMarketRivenReq) GetPositiveStats() string {
	if x != nil && x.PositiveStats != nil {
		return *x.PositiveStats
	}
	return ""
}

func (x *WarframeMarketRivenReq) GetNegativeStats() string {
	if x != nil && x.NegativeStats != nil {
		return *x.NegativeStats
	}
	return ""
}

func (x *WarframeMarketRivenReq) GetOperation() WarframeMarketRivenReq_WmrOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return WarframeMarketRivenReq_AllOf
}

func (x *WarframeMarketRivenReq) GetMasteryRankMin() int32 {
	if x != nil && x.MasteryRankMin != nil {
		return *x.MasteryRankMin
	}
	return 0
}

func (x *WarframeMarketRivenReq) GetMasteryRankMax() int32 {
	if x != nil && x.MasteryRankMax != nil {
		return *x.MasteryRankMax
	}
	return 0
}

func (x *WarframeMarketRivenReq) GetReRollsMin() int32 {
	if x != nil && x.ReRollsMin != nil {
		return *x.ReRollsMin
	}
	return 0
}

func (x *WarframeMarketRivenReq) GetReRollsMax() int32 {
	if x != nil && x.ReRollsMax != nil {
		return *x.ReRollsMax
	}
	return 0
}

func (x *WarframeMarketRivenReq) GetModRank() string {
	if x != nil && x.ModRank != nil {
		return *x.ModRank
	}
	return ""
}

func (x *WarframeMarketRivenReq) GetPolarity() string {
	if x != nil && x.Polarity != nil {
		return *x.Polarity
	}
	return ""
}

func (x *WarframeMarketRivenReq) GetSortBy() WmaSortBy {
	if x != nil {
		return x.SortBy
	}
	return WmaSortBy_PriceDesc
}

type WarframeMarketLichReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform      *string                           `protobuf:"bytes,1,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	BuyoutPolicy  *WmaBuyoutPolicy                  `protobuf:"varint,2,opt,name=buyoutPolicy,proto3,enum=wfs.v1.WmaBuyoutPolicy,oneof" json:"buyoutPolicy,omitempty"`
	WeaponUrlName string                            `protobuf:"bytes,3,opt,name=weaponUrlName,proto3" json:"weaponUrlName,omitempty"`
	Element       *WarframeMarketLichReq_WmlElement `protobuf:"varint,4,opt,name=element,proto3,enum=wfs.v1.WarframeMarketLichReq_WmlElement,oneof" json:"element,omitempty"`
	Ephemera      *bool                             `protobuf:"varint,5,opt,name=ephemera,proto3,oneof" json:"ephemera,omitempty"`
	DamageMin     *int32                            `protobuf:"varint,6,opt,name=damageMin,proto3,oneof" json:"damageMin,omitempty"`
	DamageMax     *int32                            `protobuf:"varint,7,opt,name=damageMax,proto3,oneof" json:"damageMax,omitempty"`
	Quirk         *string                           `protobuf:"bytes,8,opt,name=quirk,proto3,oneof" json:"quirk,omitempty"`
	SortBy        WmaSortBy                         `protobuf:"varint,9,opt,name=sortBy,proto3,enum=wfs.v1.WmaSortBy" json:"sortBy,omitempty"`
}

func (x *WarframeMarketLichReq) Reset() {
	*x = WarframeMarketLichReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketLichReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketLichReq) ProtoMessage() {}

func (x *WarframeMarketLichReq) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketLichReq.ProtoReflect.Descriptor instead.
func (*WarframeMarketLichReq) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{13}
}

func (x *WarframeMarketLichReq) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *WarframeMarketLichReq) GetBuyoutPolicy() WmaBuyoutPolicy {
	if x != nil && x.BuyoutPolicy != nil {
		return *x.BuyoutPolicy
	}
	return WmaBuyoutPolicy_With
}

func (x *WarframeMarketLichReq) GetWeaponUrlName() string {
	if x != nil {
		return x.WeaponUrlName
	}
	return ""
}

func (x *WarframeMarketLichReq) GetElement() WarframeMarketLichReq_WmlElement {
	if x != nil && x.Element != nil {
		return *x.Element
	}
	return WarframeMarketLichReq_Impact
}

func (x *WarframeMarketLichReq) GetEphemera() bool {
	if x != nil && x.Ephemera != nil {
		return *x.Ephemera
	}
	return false
}

func (x *WarframeMarketLichReq) GetDamageMin() int32 {
	if x != nil && x.DamageMin != nil {
		return *x.DamageMin
	}
	return 0
}

func (x *WarframeMarketLichReq) GetDamageMax() int32 {
	if x != nil && x.DamageMax != nil {
		return *x.DamageMax
	}
	return 0
}

func (x *WarframeMarketLichReq) GetQuirk() string {
	if x != nil && x.Quirk != nil {
		return *x.Quirk
	}
	return ""
}

func (x *WarframeMarketLichReq) GetSortBy() WmaSortBy {
	if x != nil {
		return x.SortBy
	}
	return WmaSortBy_PriceDesc
}

type WarframeMarketRivenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MinimalReputation uint32                        `protobuf:"varint,2,opt,name=minimal_reputation,json=minimalReputation,proto3" json:"minimal_reputation,omitempty"`
	Winner            string                        `protobuf:"bytes,3,opt,name=winner,proto3" json:"winner,omitempty"`
	Private           bool                          `protobuf:"varint,4,opt,name=private,proto3" json:"private,omitempty"`
	Visible           bool                          `protobuf:"varint,5,opt,name=visible,proto3" json:"visible,omitempty"`
	NoteRaw           string                        `protobuf:"bytes,6,opt,name=noteRaw,proto3" json:"noteRaw,omitempty"`
	Note              string                        `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Owner             *WarframeMarketUser           `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	StartingPrice     uint32                        `protobuf:"varint,9,opt,name=startingPrice,proto3" json:"startingPrice,omitempty"`
	BuyoutPrice       uint32                        `protobuf:"varint,10,opt,name=buyoutPrice,proto3" json:"buyoutPrice,omitempty"`
	MinimalIncrement  uint32                        `protobuf:"varint,11,opt,name=minimalIncrement,proto3" json:"minimalIncrement,omitempty"`
	IsDirectSell      bool                          `protobuf:"varint,12,opt,name=isDirectSell,proto3" json:"isDirectSell,omitempty"`
	TopBid            int32                         `protobuf:"varint,13,opt,name=topBid,proto3" json:"topBid,omitempty"`
	Created           string                        `protobuf:"bytes,14,opt,name=created,proto3" json:"created,omitempty"`
	Updated           string                        `protobuf:"bytes,15,opt,name=updated,proto3" json:"updated,omitempty"`
	Platform          string                        `protobuf:"bytes,16,opt,name=platform,proto3" json:"platform,omitempty"`
	Closed            bool                          `protobuf:"varint,17,opt,name=closed,proto3" json:"closed,omitempty"`
	IsMarkedFor       string                        `protobuf:"bytes,18,opt,name=isMarkedFor,proto3" json:"isMarkedFor,omitempty"`
	MarkedOperationAt string                        `protobuf:"bytes,19,opt,name=markedOperationAt,proto3" json:"markedOperationAt,omitempty"`
	Item              *WarframeMarketRivenResp_Item `protobuf:"bytes,20,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *WarframeMarketRivenResp) Reset() {
	*x = WarframeMarketRivenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketRivenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketRivenResp) ProtoMessage() {}

func (x *WarframeMarketRivenResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketRivenResp.ProtoReflect.Descriptor instead.
func (*WarframeMarketRivenResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{14}
}

func (x *WarframeMarketRivenResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WarframeMarketRivenResp) GetMinimalReputation() uint32 {
	if x != nil {
		return x.MinimalReputation
	}
	return 0
}

func (x *WarframeMarketRivenResp) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

func (x *WarframeMarketRivenResp) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *WarframeMarketRivenResp) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *WarframeMarketRivenResp) GetNoteRaw() string {
	if x != nil {
		return x.NoteRaw
	}
	return ""
}

func (x *WarframeMarketRivenResp) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *WarframeMarketRivenResp) GetOwner() *WarframeMarketUser {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *WarframeMarketRivenResp) GetStartingPrice() uint32 {
	if x != nil {
		return x.StartingPrice
	}
	return 0
}

func (x *WarframeMarketRivenResp) GetBuyoutPrice() uint32 {
	if x != nil {
		return x.BuyoutPrice
	}
	return 0
}

func (x *WarframeMarketRivenResp) GetMinimalIncrement() uint32 {
	if x != nil {
		return x.MinimalIncrement
	}
	return 0
}

func (x *WarframeMarketRivenResp) GetIsDirectSell() bool {
	if x != nil {
		return x.IsDirectSell
	}
	return false
}

func (x *WarframeMarketRivenResp) GetTopBid() int32 {
	if x != nil {
		return x.TopBid
	}
	return 0
}

func (x *WarframeMarketRivenResp) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *WarframeMarketRivenResp) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *WarframeMarketRivenResp) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *WarframeMarketRivenResp) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *WarframeMarketRivenResp) GetIsMarkedFor() string {
	if x != nil {
		return x.IsMarkedFor
	}
	return ""
}

func (x *WarframeMarketRivenResp) GetMarkedOperationAt() string {
	if x != nil {
		return x.MarkedOperationAt
	}
	return ""
}

func (x *WarframeMarketRivenResp) GetItem() *WarframeMarketRivenResp_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type WarframeMarketLichResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MinimalReputation uint32                       `protobuf:"varint,2,opt,name=minimal_reputation,json=minimalReputation,proto3" json:"minimal_reputation,omitempty"`
	Winner            string                       `protobuf:"bytes,3,opt,name=winner,proto3" json:"winner,omitempty"`
	Private           bool                         `protobuf:"varint,4,opt,name=private,proto3" json:"private,omitempty"`
	Visible           bool                         `protobuf:"varint,5,opt,name=visible,proto3" json:"visible,omitempty"`
	NoteRaw           string                       `protobuf:"bytes,6,opt,name=noteRaw,proto3" json:"noteRaw,omitempty"`
	Note              string                       `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Owner             *WarframeMarketUser          `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	StartingPrice     uint32                       `protobuf:"varint,9,opt,name=startingPrice,proto3" json:"startingPrice,omitempty"`
	BuyoutPrice       uint32                       `protobuf:"varint,10,opt,name=buyoutPrice,proto3" json:"buyoutPrice,omitempty"`
	MinimalIncrement  uint32                       `protobuf:"varint,11,opt,name=minimalIncrement,proto3" json:"minimalIncrement,omitempty"`
	IsDirectSell      bool                         `protobuf:"varint,12,opt,name=isDirectSell,proto3" json:"isDirectSell,omitempty"`
	TopBid            int32                        `protobuf:"varint,13,opt,name=topBid,proto3" json:"topBid,omitempty"`
	Created           string                       `protobuf:"bytes,14,opt,name=created,proto3" json:"created,omitempty"`
	Updated           string                       `protobuf:"bytes,15,opt,name=updated,proto3" json:"updated,omitempty"`
	Platform          string                       `protobuf:"bytes,16,opt,name=platform,proto3" json:"platform,omitempty"`
	Closed            bool                         `protobuf:"varint,17,opt,name=closed,proto3" json:"closed,omitempty"`
	IsMarkedFor       string                       `protobuf:"bytes,18,opt,name=isMarkedFor,proto3" json:"isMarkedFor,omitempty"`
	MarkedOperationAt string                       `protobuf:"bytes,19,opt,name=markedOperationAt,proto3" json:"markedOperationAt,omitempty"`
	Item              *WarframeMarketLichResp_Item `protobuf:"bytes,20,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *WarframeMarketLichResp) Reset() {
	*x = WarframeMarketLichResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketLichResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketLichResp) ProtoMessage() {}

func (x *WarframeMarketLichResp) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketLichResp.ProtoReflect.Descriptor instead.
func (*WarframeMarketLichResp) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{15}
}

func (x *WarframeMarketLichResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WarframeMarketLichResp) GetMinimalReputation() uint32 {
	if x != nil {
		return x.MinimalReputation
	}
	return 0
}

func (x *WarframeMarketLichResp) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

func (x *WarframeMarketLichResp) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *WarframeMarketLichResp) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *WarframeMarketLichResp) GetNoteRaw() string {
	if x != nil {
		return x.NoteRaw
	}
	return ""
}

func (x *WarframeMarketLichResp) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *WarframeMarketLichResp) GetOwner() *WarframeMarketUser {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *WarframeMarketLichResp) GetStartingPrice() uint32 {
	if x != nil {
		return x.StartingPrice
	}
	return 0
}

func (x *WarframeMarketLichResp) GetBuyoutPrice() uint32 {
	if x != nil {
		return x.BuyoutPrice
	}
	return 0
}

func (x *WarframeMarketLichResp) GetMinimalIncrement() uint32 {
	if x != nil {
		return x.MinimalIncrement
	}
	return 0
}

func (x *WarframeMarketLichResp) GetIsDirectSell() bool {
	if x != nil {
		return x.IsDirectSell
	}
	return false
}

func (x *WarframeMarketLichResp) GetTopBid() int32 {
	if x != nil {
		return x.TopBid
	}
	return 0
}

func (x *WarframeMarketLichResp) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *WarframeMarketLichResp) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *WarframeMarketLichResp) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *WarframeMarketLichResp) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *WarframeMarketLichResp) GetIsMarkedFor() string {
	if x != nil {
		return x.IsMarkedFor
	}
	return ""
}

func (x *WarframeMarketLichResp) GetMarkedOperationAt() string {
	if x != nil {
		return x.MarkedOperationAt
	}
	return ""
}

func (x *WarframeMarketLichResp) GetItem() *WarframeMarketLichResp_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type CyclesResp_Cycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Activation int64   `protobuf:"varint,2,opt,name=activation,proto3" json:"activation,omitempty"`
	Expiry     int64   `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	State      string  `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	TimeLeft   []int64 `protobuf:"varint,5,rep,packed,name=timeLeft,proto3" json:"timeLeft,omitempty"`
}

func (x *CyclesResp_Cycle) Reset() {
	*x = CyclesResp_Cycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CyclesResp_Cycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CyclesResp_Cycle) ProtoMessage() {}

func (x *CyclesResp_Cycle) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CyclesResp_Cycle.ProtoReflect.Descriptor instead.
func (*CyclesResp_Cycle) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CyclesResp_Cycle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CyclesResp_Cycle) GetActivation() int64 {
	if x != nil {
		return x.Activation
	}
	return 0
}

func (x *CyclesResp_Cycle) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *CyclesResp_Cycle) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CyclesResp_Cycle) GetTimeLeft() []int64 {
	if x != nil {
		return x.TimeLeft
	}
	return nil
}

type VoidStormResp_Fissure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Activation  string `protobuf:"bytes,2,opt,name=activation,proto3" json:"activation,omitempty"`
	StartString string `protobuf:"bytes,3,opt,name=startString,proto3" json:"startString,omitempty"`
	Expiry      string `protobuf:"bytes,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Active      bool   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	Node        string `protobuf:"bytes,6,opt,name=node,proto3" json:"node,omitempty"`
	MissionType string `protobuf:"bytes,7,opt,name=missionType,proto3" json:"missionType,omitempty"`
	MissionKey  string `protobuf:"bytes,8,opt,name=missionKey,proto3" json:"missionKey,omitempty"`
	Enemy       string `protobuf:"bytes,9,opt,name=enemy,proto3" json:"enemy,omitempty"`
	EnemyKey    string `protobuf:"bytes,10,opt,name=enemyKey,proto3" json:"enemyKey,omitempty"`
	NodeKey     string `protobuf:"bytes,11,opt,name=nodeKey,proto3" json:"nodeKey,omitempty"`
	Tier        string `protobuf:"bytes,12,opt,name=tier,proto3" json:"tier,omitempty"`
	TierNum     uint32 `protobuf:"varint,13,opt,name=tierNum,proto3" json:"tierNum,omitempty"`
	Expired     bool   `protobuf:"varint,14,opt,name=expired,proto3" json:"expired,omitempty"`
	Eta         string `protobuf:"bytes,15,opt,name=eta,proto3" json:"eta,omitempty"`
	IsStorm     bool   `protobuf:"varint,16,opt,name=isStorm,proto3" json:"isStorm,omitempty"`
	IsHard      bool   `protobuf:"varint,17,opt,name=isHard,proto3" json:"isHard,omitempty"`
}

func (x *VoidStormResp_Fissure) Reset() {
	*x = VoidStormResp_Fissure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoidStormResp_Fissure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoidStormResp_Fissure) ProtoMessage() {}

func (x *VoidStormResp_Fissure) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoidStormResp_Fissure.ProtoReflect.Descriptor instead.
func (*VoidStormResp_Fissure) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{2, 0}
}

func (x *VoidStormResp_Fissure) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetActivation() string {
	if x != nil {
		return x.Activation
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetStartString() string {
	if x != nil {
		return x.StartString
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *VoidStormResp_Fissure) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetMissionType() string {
	if x != nil {
		return x.MissionType
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetMissionKey() string {
	if x != nil {
		return x.MissionKey
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetEnemy() string {
	if x != nil {
		return x.Enemy
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetEnemyKey() string {
	if x != nil {
		return x.EnemyKey
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetNodeKey() string {
	if x != nil {
		return x.NodeKey
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetTierNum() uint32 {
	if x != nil {
		return x.TierNum
	}
	return 0
}

func (x *VoidStormResp_Fissure) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *VoidStormResp_Fissure) GetEta() string {
	if x != nil {
		return x.Eta
	}
	return ""
}

func (x *VoidStormResp_Fissure) GetIsStorm() bool {
	if x != nil {
		return x.IsStorm
	}
	return false
}

func (x *VoidStormResp_Fissure) GetIsHard() bool {
	if x != nil {
		return x.IsHard
	}
	return false
}

type SortiesResp_Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionType         string `protobuf:"bytes,1,opt,name=missionType,proto3" json:"missionType,omitempty"`
	Modifier            string `protobuf:"bytes,2,opt,name=modifier,proto3" json:"modifier,omitempty"`
	ModifierDescription string `protobuf:"bytes,3,opt,name=modifierDescription,proto3" json:"modifierDescription,omitempty"`
	Node                string `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *SortiesResp_Variant) Reset() {
	*x = SortiesResp_Variant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortiesResp_Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortiesResp_Variant) ProtoMessage() {}

func (x *SortiesResp_Variant) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortiesResp_Variant.ProtoReflect.Descriptor instead.
func (*SortiesResp_Variant) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SortiesResp_Variant) GetMissionType() string {
	if x != nil {
		return x.MissionType
	}
	return ""
}

func (x *SortiesResp_Variant) GetModifier() string {
	if x != nil {
		return x.Modifier
	}
	return ""
}

func (x *SortiesResp_Variant) GetModifierDescription() string {
	if x != nil {
		return x.ModifierDescription
	}
	return ""
}

func (x *SortiesResp_Variant) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type DailyDealsResp_DailyDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item          string `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Expiry        string `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Activation    string `protobuf:"bytes,3,opt,name=activation,proto3" json:"activation,omitempty"`
	OriginalPrice uint32 `protobuf:"varint,4,opt,name=originalPrice,proto3" json:"originalPrice,omitempty"`
	SalePrice     uint32 `protobuf:"varint,5,opt,name=salePrice,proto3" json:"salePrice,omitempty"`
	Total         uint32 `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	Sold          uint32 `protobuf:"varint,7,opt,name=sold,proto3" json:"sold,omitempty"`
	Id            string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	Eta           string `protobuf:"bytes,9,opt,name=eta,proto3" json:"eta,omitempty"`
	Discount      uint32 `protobuf:"varint,10,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *DailyDealsResp_DailyDeal) Reset() {
	*x = DailyDealsResp_DailyDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyDealsResp_DailyDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyDealsResp_DailyDeal) ProtoMessage() {}

func (x *DailyDealsResp_DailyDeal) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyDealsResp_DailyDeal.ProtoReflect.Descriptor instead.
func (*DailyDealsResp_DailyDeal) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DailyDealsResp_DailyDeal) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *DailyDealsResp_DailyDeal) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

func (x *DailyDealsResp_DailyDeal) GetActivation() string {
	if x != nil {
		return x.Activation
	}
	return ""
}

func (x *DailyDealsResp_DailyDeal) GetOriginalPrice() uint32 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *DailyDealsResp_DailyDeal) GetSalePrice() uint32 {
	if x != nil {
		return x.SalePrice
	}
	return 0
}

func (x *DailyDealsResp_DailyDeal) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DailyDealsResp_DailyDeal) GetSold() uint32 {
	if x != nil {
		return x.Sold
	}
	return 0
}

func (x *DailyDealsResp_DailyDeal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DailyDealsResp_DailyDeal) GetEta() string {
	if x != nil {
		return x.Eta
	}
	return ""
}

func (x *DailyDealsResp_DailyDeal) GetDiscount() uint32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type WarframeMarketResp_WarframeMarketOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 白金
	Platinum int64 `protobuf:"varint,2,opt,name=platinum,proto3" json:"platinum,omitempty"`
	// 数量
	Quantity     int32               `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	OrderType    string              `protobuf:"bytes,4,opt,name=orderType,proto3" json:"orderType,omitempty"`
	CreationDate string              `protobuf:"bytes,5,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	LastUpdate   string              `protobuf:"bytes,6,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Platform     string              `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
	Visible      bool                `protobuf:"varint,8,opt,name=visible,proto3" json:"visible,omitempty"`
	Region       string              `protobuf:"bytes,9,opt,name=region,proto3" json:"region,omitempty"`
	User         *WarframeMarketUser `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *WarframeMarketResp_WarframeMarketOrder) Reset() {
	*x = WarframeMarketResp_WarframeMarketOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketResp_WarframeMarketOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketResp_WarframeMarketOrder) ProtoMessage() {}

func (x *WarframeMarketResp_WarframeMarketOrder) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketResp_WarframeMarketOrder.ProtoReflect.Descriptor instead.
func (*WarframeMarketResp_WarframeMarketOrder) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{10, 0}
}

func (x *WarframeMarketResp_WarframeMarketOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WarframeMarketResp_WarframeMarketOrder) GetPlatinum() int64 {
	if x != nil {
		return x.Platinum
	}
	return 0
}

func (x *WarframeMarketResp_WarframeMarketOrder) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *WarframeMarketResp_WarframeMarketOrder) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *WarframeMarketResp_WarframeMarketOrder) GetCreationDate() string {
	if x != nil {
		return x.CreationDate
	}
	return ""
}

func (x *WarframeMarketResp_WarframeMarketOrder) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *WarframeMarketResp_WarframeMarketOrder) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *WarframeMarketResp_WarframeMarketOrder) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *WarframeMarketResp_WarframeMarketOrder) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *WarframeMarketResp_WarframeMarketOrder) GetUser() *WarframeMarketUser {
	if x != nil {
		return x.User
	}
	return nil
}

type WarframeMarketRivenResp_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positive bool   `protobuf:"varint,1,opt,name=positive,proto3" json:"positive,omitempty"`
	Value    uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	UrlName  string `protobuf:"bytes,3,opt,name=urlName,proto3" json:"urlName,omitempty"`
}

func (x *WarframeMarketRivenResp_Attribute) Reset() {
	*x = WarframeMarketRivenResp_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketRivenResp_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketRivenResp_Attribute) ProtoMessage() {}

func (x *WarframeMarketRivenResp_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketRivenResp_Attribute.ProtoReflect.Descriptor instead.
func (*WarframeMarketRivenResp_Attribute) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{14, 0}
}

func (x *WarframeMarketRivenResp_Attribute) GetPositive() bool {
	if x != nil {
		return x.Positive
	}
	return false
}

func (x *WarframeMarketRivenResp_Attribute) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *WarframeMarketRivenResp_Attribute) GetUrlName() string {
	if x != nil {
		return x.UrlName
	}
	return ""
}

type WarframeMarketRivenResp_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          string                               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes    []*WarframeMarketRivenResp_Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Name          string                               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MasteryLevel  uint32                               `protobuf:"varint,4,opt,name=masteryLevel,proto3" json:"masteryLevel,omitempty"`
	ReRolls       uint32                               `protobuf:"varint,5,opt,name=reRolls,proto3" json:"reRolls,omitempty"`
	WeaponUrlName string                               `protobuf:"bytes,6,opt,name=weaponUrlName,proto3" json:"weaponUrlName,omitempty"`
	Polarity      string                               `protobuf:"bytes,7,opt,name=polarity,proto3" json:"polarity,omitempty"`
	ModRank       uint32                               `protobuf:"varint,8,opt,name=modRank,proto3" json:"modRank,omitempty"`
}

func (x *WarframeMarketRivenResp_Item) Reset() {
	*x = WarframeMarketRivenResp_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketRivenResp_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketRivenResp_Item) ProtoMessage() {}

func (x *WarframeMarketRivenResp_Item) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketRivenResp_Item.ProtoReflect.Descriptor instead.
func (*WarframeMarketRivenResp_Item) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{14, 1}
}

func (x *WarframeMarketRivenResp_Item) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WarframeMarketRivenResp_Item) GetAttributes() []*WarframeMarketRivenResp_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *WarframeMarketRivenResp_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WarframeMarketRivenResp_Item) GetMasteryLevel() uint32 {
	if x != nil {
		return x.MasteryLevel
	}
	return 0
}

func (x *WarframeMarketRivenResp_Item) GetReRolls() uint32 {
	if x != nil {
		return x.ReRolls
	}
	return 0
}

func (x *WarframeMarketRivenResp_Item) GetWeaponUrlName() string {
	if x != nil {
		return x.WeaponUrlName
	}
	return ""
}

func (x *WarframeMarketRivenResp_Item) GetPolarity() string {
	if x != nil {
		return x.Polarity
	}
	return ""
}

func (x *WarframeMarketRivenResp_Item) GetModRank() uint32 {
	if x != nil {
		return x.ModRank
	}
	return 0
}

type WarframeMarketLichResp_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positive bool   `protobuf:"varint,1,opt,name=positive,proto3" json:"positive,omitempty"`
	Value    uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	UrlName  string `protobuf:"bytes,3,opt,name=urlName,proto3" json:"urlName,omitempty"`
}

func (x *WarframeMarketLichResp_Attribute) Reset() {
	*x = WarframeMarketLichResp_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketLichResp_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketLichResp_Attribute) ProtoMessage() {}

func (x *WarframeMarketLichResp_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketLichResp_Attribute.ProtoReflect.Descriptor instead.
func (*WarframeMarketLichResp_Attribute) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{15, 0}
}

func (x *WarframeMarketLichResp_Attribute) GetPositive() bool {
	if x != nil {
		return x.Positive
	}
	return false
}

func (x *WarframeMarketLichResp_Attribute) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *WarframeMarketLichResp_Attribute) GetUrlName() string {
	if x != nil {
		return x.UrlName
	}
	return ""
}

type WarframeMarketLichResp_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          string                              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes    []*WarframeMarketLichResp_Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Name          string                              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MasteryLevel  uint32                              `protobuf:"varint,4,opt,name=masteryLevel,proto3" json:"masteryLevel,omitempty"`
	ReRolls       uint32                              `protobuf:"varint,5,opt,name=reRolls,proto3" json:"reRolls,omitempty"`
	WeaponUrlName string                              `protobuf:"bytes,6,opt,name=weaponUrlName,proto3" json:"weaponUrlName,omitempty"`
	Polarity      string                              `protobuf:"bytes,7,opt,name=polarity,proto3" json:"polarity,omitempty"`
	ModRank       uint32                              `protobuf:"varint,8,opt,name=modRank,proto3" json:"modRank,omitempty"`
}

func (x *WarframeMarketLichResp_Item) Reset() {
	*x = WarframeMarketLichResp_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wfs_v1_wfs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarframeMarketLichResp_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarframeMarketLichResp_Item) ProtoMessage() {}

func (x *WarframeMarketLichResp_Item) ProtoReflect() protoreflect.Message {
	mi := &file_wfs_v1_wfs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarframeMarketLichResp_Item.ProtoReflect.Descriptor instead.
func (*WarframeMarketLichResp_Item) Descriptor() ([]byte, []int) {
	return file_wfs_v1_wfs_proto_rawDescGZIP(), []int{15, 1}
}

func (x *WarframeMarketLichResp_Item) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WarframeMarketLichResp_Item) GetAttributes() []*WarframeMarketLichResp_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *WarframeMarketLichResp_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WarframeMarketLichResp_Item) GetMasteryLevel() uint32 {
	if x != nil {
		return x.MasteryLevel
	}
	return 0
}

func (x *WarframeMarketLichResp_Item) GetReRolls() uint32 {
	if x != nil {
		return x.ReRolls
	}
	return 0
}

func (x *WarframeMarketLichResp_Item) GetWeaponUrlName() string {
	if x != nil {
		return x.WeaponUrlName
	}
	return ""
}

func (x *WarframeMarketLichResp_Item) GetPolarity() string {
	if x != nil {
		return x.Polarity
	}
	return ""
}

func (x *WarframeMarketLichResp_Item) GetModRank() uint32 {
	if x != nil {
		return x.ModRank
	}
	return 0
}

var File_wfs_v1_wfs_proto protoreflect.FileDescriptor

var file_wfs_v1_wfs_proto_rawDesc = []byte{
	0x0a, 0x10, 0x77, 0x66, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x05, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x0c, 0x0a, 0x0a,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x86, 0x04, 0x0a, 0x0d, 0x56,
	0x6f, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x08,
	0x66, 0x69, 0x73, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x46, 0x69, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66,
	0x69, 0x73, 0x73, 0x75, 0x72, 0x65, 0x73, 0x1a, 0xb9, 0x03, 0x0a, 0x07, 0x46, 0x69, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x48, 0x61, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48,
	0x61, 0x72, 0x64, 0x22, 0xd2, 0x03, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x74, 0x61, 0x1a, 0x8d, 0x01, 0x0a, 0x07, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x0e, 0x56, 0x6f, 0x69,
	0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x0f, 0x0a,
	0x0d, 0x49, 0x6e, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x10,
	0x0a, 0x0e, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x0a, 0x0a, 0x08, 0x4b, 0x75, 0x76, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0xd8, 0x02, 0x0a,
	0x0e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x40, 0x0a, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x65, 0x61, 0x6c,
	0x73, 0x1a, 0x83, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x11, 0x57, 0x61, 0x72, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x9c,
	0x03, 0x0a, 0x12, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0xbd, 0x02,
	0x0a, 0x13, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x75,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x66,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xc4, 0x01,
	0x0a, 0x12, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x06, 0x0a, 0x16, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x69, 0x76, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6d, 0x61, 0x42, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x01, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4e,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x69, 0x76, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x2e, 0x57, 0x6d, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x52, 0x6f,
	0x6c, 0x6c, 0x73, 0x4d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0a,
	0x72, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x4d, 0x61, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6d, 0x61, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x24, 0x0a,
	0x0c, 0x57, 0x6d, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x6c, 0x6c, 0x4f, 0x66, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6e, 0x79, 0x4f,
	0x66, 0x10, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x52,
	0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65,
	0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x4d, 0x69, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x52,
	0x6f, 0x6c, 0x6c, 0x73, 0x4d, 0x61, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x6f, 0x64, 0x52,
	0x61, 0x6e, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x22, 0xda, 0x04, 0x0a, 0x15, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x62,
	0x75, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6d, 0x61, 0x42, 0x75,
	0x79, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x01, 0x52, 0x0c, 0x62, 0x75,
	0x79, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0d, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x2e, 0x57, 0x6d, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x02,
	0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x08, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x09, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x69, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x71, 0x75, 0x69, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6d, 0x61, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x65, 0x0a, 0x0a, 0x57, 0x6d, 0x6c,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x43, 0x6f, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x6f, 0x78, 0x69,
	0x6e, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x62, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x69, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x69, 0x72, 0x6b, 0x22, 0x95, 0x08,
	0x0a, 0x17, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x69, 0x76, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x77, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75,
	0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x62, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x70, 0x42, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f,
	0x70, 0x42, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x66, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x69, 0x76, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x57, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x93, 0x02, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x69, 0x76, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x6f, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x92, 0x08, 0x0a, 0x16, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x6f, 0x74, 0x65, 0x52, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f,
	0x74, 0x65, 0x52, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x42, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x42, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x57, 0x0a, 0x09,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x92, 0x02, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x2a, 0x27, 0x0a, 0x0f, 0x57, 0x6d,
	0x61, 0x42, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x08, 0x0a,
	0x04, 0x57, 0x69, 0x74, 0x68, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x10, 0x01, 0x2a, 0x72, 0x0a, 0x09, 0x57, 0x6d, 0x61, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x73, 0x63, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x63, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x41, 0x73, 0x63, 0x10, 0x05, 0x32, 0xa6, 0x06, 0x0a, 0x03, 0x57, 0x66, 0x73, 0x12,
	0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x79,
	0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e,
	0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x39, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x12, 0x19, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x69,
	0x76, 0x65, 0x6e, 0x12, 0x1e, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x69, 0x76, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x69, 0x76, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x68, 0x12, 0x1d, 0x2e,
	0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x77,
	0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x76, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x69,
	0x67, 0x68, 0x74, 0x77, 0x61, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x4b, 0x75, 0x76, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x10, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x76, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x77, 0x66, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x65, 0x61, 0x6c,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x77, 0x66, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x67, 0x75, 0x69, 0x6c, 0x61, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x69, 0x61, 0x6f, 0x2d, 0x62, 0x6f,
	0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x66, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wfs_v1_wfs_proto_rawDescOnce sync.Once
	file_wfs_v1_wfs_proto_rawDescData = file_wfs_v1_wfs_proto_rawDesc
)

func file_wfs_v1_wfs_proto_rawDescGZIP() []byte {
	file_wfs_v1_wfs_proto_rawDescOnce.Do(func() {
		file_wfs_v1_wfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_wfs_v1_wfs_proto_rawDescData)
	})
	return file_wfs_v1_wfs_proto_rawDescData
}

var file_wfs_v1_wfs_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_wfs_v1_wfs_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_wfs_v1_wfs_proto_goTypes = []interface{}{
	(WmaBuyoutPolicy)(0),                           // 0: wfs.v1.WmaBuyoutPolicy
	(WmaSortBy)(0),                                 // 1: wfs.v1.WmaSortBy
	(WarframeMarketRivenReq_WmrOperation)(0),       // 2: wfs.v1.WarframeMarketRivenReq.WmrOperation
	(WarframeMarketLichReq_WmlElement)(0),          // 3: wfs.v1.WarframeMarketLichReq.WmlElement
	(*CyclesResp)(nil),                             // 4: wfs.v1.CyclesResp
	(*AlertsResp)(nil),                             // 5: wfs.v1.AlertsResp
	(*VoidStormResp)(nil),                          // 6: wfs.v1.VoidStormResp
	(*SortiesResp)(nil),                            // 7: wfs.v1.SortiesResp
	(*VoidTraderResp)(nil),                         // 8: wfs.v1.VoidTraderResp
	(*InvasionsResp)(nil),                          // 9: wfs.v1.InvasionsResp
	(*NightwavesResp)(nil),                         // 10: wfs.v1.NightwavesResp
	(*KuvaResp)(nil),                               // 11: wfs.v1.KuvaResp
	(*DailyDealsResp)(nil),                         // 12: wfs.v1.DailyDealsResp
	(*WarframeMarketReq)(nil),                      // 13: wfs.v1.WarframeMarketReq
	(*WarframeMarketResp)(nil),                     // 14: wfs.v1.WarframeMarketResp
	(*WarframeMarketUser)(nil),                     // 15: wfs.v1.WarframeMarketUser
	(*WarframeMarketRivenReq)(nil),                 // 16: wfs.v1.WarframeMarketRivenReq
	(*WarframeMarketLichReq)(nil),                  // 17: wfs.v1.WarframeMarketLichReq
	(*WarframeMarketRivenResp)(nil),                // 18: wfs.v1.WarframeMarketRivenResp
	(*WarframeMarketLichResp)(nil),                 // 19: wfs.v1.WarframeMarketLichResp
	(*CyclesResp_Cycle)(nil),                       // 20: wfs.v1.CyclesResp.Cycle
	(*VoidStormResp_Fissure)(nil),                  // 21: wfs.v1.VoidStormResp.Fissure
	(*SortiesResp_Variant)(nil),                    // 22: wfs.v1.SortiesResp.Variant
	(*DailyDealsResp_DailyDeal)(nil),               // 23: wfs.v1.DailyDealsResp.DailyDeal
	(*WarframeMarketResp_WarframeMarketOrder)(nil), // 24: wfs.v1.WarframeMarketResp.WarframeMarketOrder
	(*WarframeMarketRivenResp_Attribute)(nil),      // 25: wfs.v1.WarframeMarketRivenResp.Attribute
	(*WarframeMarketRivenResp_Item)(nil),           // 26: wfs.v1.WarframeMarketRivenResp.Item
	(*WarframeMarketLichResp_Attribute)(nil),       // 27: wfs.v1.WarframeMarketLichResp.Attribute
	(*WarframeMarketLichResp_Item)(nil),            // 28: wfs.v1.WarframeMarketLichResp.Item
	(*emptypb.Empty)(nil),                          // 29: google.protobuf.Empty
}
var file_wfs_v1_wfs_proto_depIdxs = []int32{
	20, // 0: wfs.v1.CyclesResp.cycles:type_name -> wfs.v1.CyclesResp.Cycle
	21, // 1: wfs.v1.VoidStormResp.fissures:type_name -> wfs.v1.VoidStormResp.Fissure
	22, // 2: wfs.v1.SortiesResp.variants:type_name -> wfs.v1.SortiesResp.Variant
	23, // 3: wfs.v1.DailyDealsResp.dailyDeals:type_name -> wfs.v1.DailyDealsResp.DailyDeal
	24, // 4: wfs.v1.WarframeMarketResp.orders:type_name -> wfs.v1.WarframeMarketResp.WarframeMarketOrder
	0,  // 5: wfs.v1.WarframeMarketRivenReq.buyoutPolicy:type_name -> wfs.v1.WmaBuyoutPolicy
	2,  // 6: wfs.v1.WarframeMarketRivenReq.operation:type_name -> wfs.v1.WarframeMarketRivenReq.WmrOperation
	1,  // 7: wfs.v1.WarframeMarketRivenReq.sortBy:type_name -> wfs.v1.WmaSortBy
	0,  // 8: wfs.v1.WarframeMarketLichReq.buyoutPolicy:type_name -> wfs.v1.WmaBuyoutPolicy
	3,  // 9: wfs.v1.WarframeMarketLichReq.element:type_name -> wfs.v1.WarframeMarketLichReq.WmlElement
	1,  // 10: wfs.v1.WarframeMarketLichReq.sortBy:type_name -> wfs.v1.WmaSortBy
	15, // 11: wfs.v1.WarframeMarketRivenResp.owner:type_name -> wfs.v1.WarframeMarketUser
	26, // 12: wfs.v1.WarframeMarketRivenResp.item:type_name -> wfs.v1.WarframeMarketRivenResp.Item
	15, // 13: wfs.v1.WarframeMarketLichResp.owner:type_name -> wfs.v1.WarframeMarketUser
	28, // 14: wfs.v1.WarframeMarketLichResp.item:type_name -> wfs.v1.WarframeMarketLichResp.Item
	15, // 15: wfs.v1.WarframeMarketResp.WarframeMarketOrder.user:type_name -> wfs.v1.WarframeMarketUser
	25, // 16: wfs.v1.WarframeMarketRivenResp.Item.attributes:type_name -> wfs.v1.WarframeMarketRivenResp.Attribute
	27, // 17: wfs.v1.WarframeMarketLichResp.Item.attributes:type_name -> wfs.v1.WarframeMarketLichResp.Attribute
	29, // 18: wfs.v1.Wfs.GetCycles:input_type -> google.protobuf.Empty
	29, // 19: wfs.v1.Wfs.GetAlerts:input_type -> google.protobuf.Empty
	29, // 20: wfs.v1.Wfs.GetSorties:input_type -> google.protobuf.Empty
	29, // 21: wfs.v1.Wfs.GetVoidTrader:input_type -> google.protobuf.Empty
	13, // 22: wfs.v1.Wfs.GetWarframeMarket:input_type -> wfs.v1.WarframeMarketReq
	16, // 23: wfs.v1.Wfs.GetWarframeMarketRiven:input_type -> wfs.v1.WarframeMarketRivenReq
	17, // 24: wfs.v1.Wfs.GetWarframeMarketLich:input_type -> wfs.v1.WarframeMarketLichReq
	29, // 25: wfs.v1.Wfs.GetInvasions:input_type -> google.protobuf.Empty
	29, // 26: wfs.v1.Wfs.GetNightwaves:input_type -> google.protobuf.Empty
	29, // 27: wfs.v1.Wfs.GetKuva:input_type -> google.protobuf.Empty
	29, // 28: wfs.v1.Wfs.GetVoidStorm:input_type -> google.protobuf.Empty
	29, // 29: wfs.v1.Wfs.GetDailyDeal:input_type -> google.protobuf.Empty
	4,  // 30: wfs.v1.Wfs.GetCycles:output_type -> wfs.v1.CyclesResp
	5,  // 31: wfs.v1.Wfs.GetAlerts:output_type -> wfs.v1.AlertsResp
	7,  // 32: wfs.v1.Wfs.GetSorties:output_type -> wfs.v1.SortiesResp
	8,  // 33: wfs.v1.Wfs.GetVoidTrader:output_type -> wfs.v1.VoidTraderResp
	14, // 34: wfs.v1.Wfs.GetWarframeMarket:output_type -> wfs.v1.WarframeMarketResp
	18, // 35: wfs.v1.Wfs.GetWarframeMarketRiven:output_type -> wfs.v1.WarframeMarketRivenResp
	19, // 36: wfs.v1.Wfs.GetWarframeMarketLich:output_type -> wfs.v1.WarframeMarketLichResp
	9,  // 37: wfs.v1.Wfs.GetInvasions:output_type -> wfs.v1.InvasionsResp
	10, // 38: wfs.v1.Wfs.GetNightwaves:output_type -> wfs.v1.NightwavesResp
	11, // 39: wfs.v1.Wfs.GetKuva:output_type -> wfs.v1.KuvaResp
	6,  // 40: wfs.v1.Wfs.GetVoidStorm:output_type -> wfs.v1.VoidStormResp
	12, // 41: wfs.v1.Wfs.GetDailyDeal:output_type -> wfs.v1.DailyDealsResp
	30, // [30:42] is the sub-list for method output_type
	18, // [18:30] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_wfs_v1_wfs_proto_init() }
func file_wfs_v1_wfs_proto_init() {
	if File_wfs_v1_wfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wfs_v1_wfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CyclesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoidStormResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortiesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoidTraderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvasionsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NightwavesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KuvaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyDealsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketRivenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketLichReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketRivenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketLichResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CyclesResp_Cycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoidStormResp_Fissure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortiesResp_Variant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyDealsResp_DailyDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketResp_WarframeMarketOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketRivenResp_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketRivenResp_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketLichResp_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wfs_v1_wfs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarframeMarketLichResp_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wfs_v1_wfs_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_wfs_v1_wfs_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_wfs_v1_wfs_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wfs_v1_wfs_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wfs_v1_wfs_proto_goTypes,
		DependencyIndexes: file_wfs_v1_wfs_proto_depIdxs,
		EnumInfos:         file_wfs_v1_wfs_proto_enumTypes,
		MessageInfos:      file_wfs_v1_wfs_proto_msgTypes,
	}.Build()
	File_wfs_v1_wfs_proto = out.File
	file_wfs_v1_wfs_proto_rawDesc = nil
	file_wfs_v1_wfs_proto_goTypes = nil
	file_wfs_v1_wfs_proto_depIdxs = nil
}
